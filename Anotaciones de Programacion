█████████████████████████████████████████████████████████████
██---------------------------------------------------------██
███                 Lenguaje de .C                        ███
██---------------------------------------------------------██
█████████████████████████████████████████████████████████████

»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»
// "<stdio.h>"  = Fichero de Entrada o Salida 
// "<locale.h>" = Identificador de Simbolos o Acentuación 
// "<math.h>"   = Libreria para operaciones matematicas
// " "Nombre de la carpeta\Nombre del Archivo" " = Asignacion 
de archivo .h

(Si no funciona copiar la ruta de Windows + E)
(Recuerda que si esta en la misma carpeta solo poner el nombre 
del archivo + .h)

// "#include"   = Incluir "Libreria o Acción"
// "main"       = Principal o Principio

// "int"        = Identificador de Numero "Entero"
// "float"      = Identificador de Numero "Flotante"
// "char"       = Almacenador, Dato Numerico mas Bajo o Alto
// "if"         = Estructura de "si Cumple una Accion"
// "while"      = Creador de Bucle en una Condición 
// "else"       = Controla las 2 posibilidades de una Decisión 

// "printf"     = Mostrar un Mensaje
// "scanf"      = Guardar Datos de una Accion o Mensaje

// "[]"         = Valores de Cantidad de una acción
// "&"          = "AND" Tipo de Representante de "Terminó"
// "%c"         = Representador de Datos "chart"
// "%f"         = Representador de Datos "float"
// "%i"         = Representador de Datos "int"

// "=="         = Dato es "igual a"
// "strcmp"     = Funcion que compara dos cadenas de caracteres

// "setlocale"  = Identificador de Letras y Signos en "printf"
// "(LC_ALL,"")" = Parte de "Setlocale" como identificador 

// "switch"     = En caso de una variable, inicio de una 
// "case"       = Opciones de Switch para clasificar opciones
// "default"    = Por defecto de una opcion invalida

// "pow"        = Potencia

// "sytem (COLOR 90)"  = Definicon de Color de Consola

// "Û"       = Sin Definir
// "\t"      = Sangria
// "\n"      = Espacio de linea de texto

«««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««

█████████████████████████████████████████████████████████████
██---------------------------------------------------------██
███                 Lenguaje de .Java                     ███
██---------------------------------------------------------██
█████████████████████████████████████████████████████████████

»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»
// "package" 
= Es el paquete el cual esta el codiogo
// "public class (Nombre de Archivo)" 
= Es el Nombre de dicho archivo y su funcion publica
// "import" 
= Es el porte de funcion que tiene el programa

// "java.util.Scanner;" 
= Funcion escaner para funciones en consola del programa.
// "public static Scanner s = new Scanner(System.in);" 
= Funcion la cual funciona con el importe de "java.util.Scanner;"
// "System.out.println("Mensage");" 
= Funcion de Mensaje en base  a Scanner  
// "Nombre de variable = s.nextLine();" 
= Es base al (sout+alt) la funcion de salto de linea

// "javax.swing.JOptionPane;" 
= Es el importe de la funcion de programa en forma de ventanas
emergentes.

// "JOptionPane.showInputDialog("Ejemplo");"
= Esta funcion es basica para mostrar una intruccion si se agrega
" Variable = " antes de la linea se asigna la variable 
// "Double.parseDouble(JOptionPane.showInputDialog("Ejemplo"));"
= Es una Funcion la cual aparece en forma de numeros con decimal
por parte de JOptionPane.
// "Double.parseDouble(JOptionPane.showInputDialog("Ejemplo"));"
= Funcion base a numeros enteros en forma de JOptionPane

// "JOptionPane.showMessageDialog(null, String.format("Ejemplo %.xf" + Variable);"
= Es el resultado de lo procesado base al codigo y configurado a
modo de mostrar cierta cantidad de decimales base a el primer 
mensaje, "String.format es agregado" + %.xnumeroflotante".

"

// (public static void main(String[] args)) 
= Es la funcion de ejecucion del programa como princiapal "Main"

// (String) 
= Conjunto de letras y simbolos (No numeración)
// (int) 
= Numero enteros sin decimal de la variable
// (Double/Float) 
= Numeros en Decimal base a la variable 
// (Char) 
= Funcion desde C el cual asina un caracter a una variable 

«««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««

█████████████████████████████████████████████████████████████
██---------------------------------------------------------██
███                 Lenguaje de .HTML                     ███
██---------------------------------------------------------██
█████████████████████████████████████████████████████████████

»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»
(HyperText Markup Language)

- `<!DOCTYPE>`: Define el tipo de documento y la versión de HTML.
- `<html>`: El elemento raíz de un documento HTML.
- `<head>`: Contiene metadatos/información para el documento.
- `<title>`: Especifica un título para el documento.
- `<body>`: Define el cuerpo del documento y contiene todo el contenido visible.
- `<h1>` a `<h6>`: Define encabezados de distintos tamaños.
- `<p>`: Define un párrafo.
- `<a>`: Define un hipervínculo.
- `<img>`: Inserta una imagen.
- `<ul>`: Define una lista no ordenada.
- `<ol>`: Define una lista ordenada.
- `<li>`: Define un ítem de lista.
- `<div>`: Define una sección o un contenedor.
- `<span>`: Define un contenedor en línea.
- `<form>`: Define un formulario para la entrada del usuario.
- `<input>`: Define un campo de entrada.
- `<button>`: Define un botón.
- `<select>`: Define una lista desplegable.
- `<option>`: Define las opciones dentro de una lista desplegable.
- `<textarea>`: Define un área de texto multilínea.
- `<table>`: Define una tabla.
- `<tr>`: Define una fila de tabla.
- `<td>`: Define una celda de tabla.
- `<th>`: Define una celda de encabezado de tabla.
- `<link>`: Define la relación entre un documento y un recurso externo (usualmente hojas de estilo).
- `<meta>`: Define metadatos que no pueden ser representados por otros elementos HTML.
- `<script>`: Define un script del lado del cliente.
- `<style>`: Define información de estilo para un documento.

>>Elementos HTML:

<html>: Define el principio y el final de un documento HTML.
<head>: Contiene información meta sobre el documento HTML.
<title>: Define el título del documento.
<body>: Contiene el contenido visible del documento.
<h1>, <h2>, <h3>, <h4>, <h5>, <h6>: Define encabezados de diferentes niveles.
<p>: Define un párrafo.
<a>: Define un hipervínculo.
<img>: Define una imagen.
<div>: Define una sección genérica o un contenedor.
<span>: Define una sección en línea.
<ul>: Define una lista desordenada.
<ol>: Define una lista ordenada.
<li>: Define un elemento de lista.
<table>: Define una tabla.
<tr>: Define una fila en una tabla.
<td>: Define una celda de datos en una tabla.
<th>: Define una celda de encabezado en una tabla.
<form>: Define un formulario.
<input>: Define un campo de entrada.
<textarea>: Define un área de texto multilinea.
<button>: Define un botón.

>>Atributos HTML (algunos comunes):

id: Define un identificador único para un elemento.
class: Define una o más clases para un elemento.
style: Define estilos en línea para un elemento.
src: Especifica la ubicación de un recurso, como una imagen, enlace o script.
href: Especifica la URL de destino de un hipervínculo.
alt: Proporciona un texto alternativo para elementos como imágenes.
title: Proporciona un título descriptivo para un elemento.
target: Especifica dónde abrir el enlace.
rel: Define la relación entre el documento actual y el recurso vinculado (para enlaces).
type: Especifica el tipo de contenido de un elemento, como el tipo de entrada en un campo de formulario.

«««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««

█████████████████████████████████████████████████████████████
██---------------------------------------------------------██
███                 Lenguaje de .CSS                      ███
██---------------------------------------------------------██
█████████████████████████████████████████████████████████████

»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»
(Cascading Style Sheets)

- `color`: Define el color del texto. Ejemplo: `color: blue;` hará que el texto sea azul.
- `font-family`: Establece la fuente del texto. Ejemplo: `font-family: Arial;` aplicará la fuente Arial al texto.
- `font-size`: Determina el tamaño de la fuente. Ejemplo: `font-size: 16px;` fijará el tamaño del texto a 16 píxeles.
- `text-align`: Alinea el texto. Ejemplo: `text-align: center;` centrará el texto.
- `background-color`: Establece el color de fondo de un elemento. Ejemplo: `background-color: #FFFF00;` pondrá un fondo amarillo.
- `width`: Define el ancho de un elemento. Ejemplo: `width: 100px;` hará que el elemento tenga 100 píxeles de ancho.
- `height`: Establece la altura de un elemento. Ejemplo: `height: 200px;` dará al elemento una altura de 200 píxeles.
- `margin`: Añade espacio alrededor de los elementos. Ejemplo: `margin: 10px;` añadirá un margen de 10 píxeles.
- `padding`: Añade espacio dentro de los elementos. Ejemplo: `padding: 5px;` aplicará un relleno de 5 píxeles.
- `border`: Crea un borde alrededor de un elemento. Ejemplo: `border: 1px solid black;` añadirá un borde sólido negro de 1 píxel.

- `border-radius`: Redondea las esquinas de un elemento. Ejemplo: `border-radius: 10px;` hará que las esquinas sean redondeadas.
- `box-shadow`: Añade sombra a un elemento. Ejemplo: `box-shadow: 2px 2px 2px #000000;` aplicará una sombra negra.
- `transition`: Crea una transición suave entre estados de un elemento. Ejemplo: `transition: all 0.5s ease;` para una transición de medio segundo.
- `transform`: Aplica una transformación 2D o 3D a un elemento. Ejemplo: `transform: rotate(45deg);` rotará el elemento 45 grados.
- `opacity`: Define la transparencia de un elemento. Ejemplo: `opacity: 0.5;` hará que el elemento sea semi-transparente.
- `display`: Controla el tipo de caja de renderizado de un elemento. Ejemplo: `display: flex;` aplicará un contenedor flexible.
- `flex-direction`: Define la dirección de los elementos flexibles. Ejemplo: `flex-direction: column;` alineará los hijos en columna.
- `justify-content`: Alinea los elementos flexibles horizontalmente. Ejemplo: `justify-content: center;` centrará los elementos.
- `align-items`: Alinea los elementos flexibles verticalmente. Ejemplo: `align-items: center;` centrará los elementos verticalmente.
- `grid-template-columns`: Define las columnas en un diseño de cuadrícula. Ejemplo: `grid-template-columns: auto auto auto;` para tres columnas.

- `overflow`: Controla qué sucede con el contenido que desborda su contenedor. Ejemplo: `overflow: hidden;` ocultará cualquier contenido que exceda el tamaño del contenedor.
- `cursor`: Cambia la apariencia del cursor del ratón. Ejemplo: `cursor: pointer;` cambiará el cursor a una mano cuando pase sobre el elemento.
- `z-index`: Establece el orden de apilamiento de los elementos. Ejemplo: `z-index: 1;` asegura que el elemento se coloque encima de otros con un z-index menor.
- `visibility`: Controla la visibilidad de un elemento. Ejemplo: `visibility: hidden;` hará que el elemento sea invisible pero aún ocupe espacio en el layout.
- `position`: Especifica el tipo de posicionamiento de un elemento. Ejemplo: `position: absolute;` posicionará el elemento de manera absoluta respecto a su contenedor más cercano.
- `top/right/bottom/left`: Establece la posición de un elemento posicionado. Ejemplo: `top: 10px;` moverá el elemento 10 píxeles desde el borde superior de su contenedor.
- `list-style`: Define el estilo de lista para listas ordenadas y desordenadas. Ejemplo: `list-style: none;` eliminará los marcadores de una lista.
- `text-decoration`: Añade decoración al texto como subrayado o tachado. Ejemplo: `text-decoration: underline;` subrayará el texto.
- `line-height`: Establece la altura de línea del texto. Ejemplo: `line-height: 1.5;` dará al texto una altura de línea 1.5 veces el tamaño de la fuente.
- `letter-spacing`: Controla el espaciado entre caracteres de texto. Ejemplo: `letter-spacing: 2px;` aumentará el espacio entre caracteres en 2 píxeles.

- `font-weight`: Establece el grosor de la fuente. Ejemplo: `font-weight: bold;` hará que el texto sea en negrita.
- `font-style`: Define el estilo de la fuente, como cursiva. Ejemplo: `font-style: italic;` pondrá el texto en cursiva.
- `text-transform`: Controla la capitalización del texto. Ejemplo: `text-transform: uppercase;` convertirá el texto a mayúsculas.
- `background-image`: Establece una imagen de fondo para un elemento. Ejemplo: `background-image: url('imagen.jpg');` colocará la imagen especificada como fondo.
- `background-repeat`: Controla la repetición de la imagen de fondo. Ejemplo: `background-repeat: no-repeat;` evitará que la imagen de fondo se repita.
- `background-position`: Especifica la posición de la imagen de fondo. Ejemplo: `background-position: center;` centrará la imagen de fondo.
- `background-size`: Define el tamaño de la imagen de fondo. Ejemplo: `background-size: cover;` hará que la imagen de fondo cubra completamente el contenedor.
- `border-style`: Determina el estilo del borde. Ejemplo: `border-style: dashed;` aplicará un borde discontinuo.
- `border-color`: Establece el color del borde. Ejemplo: `border-color: red;` cambiará el color del borde a rojo.
- `border-width`: Define el ancho del borde. Ejemplo: `border-width: 5px;` establecerá un borde de 5 píxeles de ancho.

- `flex-wrap`: Controla si los elementos flexibles se envuelven o no. Ejemplo: `flex-wrap: wrap;` hará que los elementos se envuelvan en varias líneas.
- `grid-template-rows`: Define las filas en un diseño de cuadrícula. Ejemplo: `grid-template-rows: auto auto auto;` para tres filas.
- `grid-column-gap`: Establece el espacio entre columnas en un diseño de cuadrícula. Ejemplo: `grid-column-gap: 20px;` añadirá un espacio de 20 píxeles entre columnas.
- `grid-row-gap`: Define el espacio entre filas en un diseño de cuadrícula. Ejemplo: `grid-row-gap: 20px;` pondrá un espacio de 20 píxeles entre filas.
- `grid-area`: Asigna un elemento a un área en un diseño de cuadrícula. Ejemplo: `grid-area: header;` colocará el elemento en el área definida como 'header'.
- `column-count`: Divide el contenido en múltiples columnas. Ejemplo: `column-count: 3;` dividirá el texto en tres columnas.
- `column-gap`: Establece el espacio entre columnas para contenido dividido. Ejemplo: `column-gap: 40px;` creará un espacio de 40 píxeles entre columnas.
- `column-rule`: Añade una línea entre columnas de contenido. Ejemplo: `column-rule: 2px solid black;` añadirá una línea sólida negra de 2 píxeles.
- `text-shadow`: Aplica sombra al texto. Ejemplo: `text-shadow: 2px 2px 2px #000000;` dará una sombra negra al texto.
- `white-space`: Controla cómo se manejan los espacios y los saltos de línea. Ejemplo: `white-space: nowrap;` evitará que el texto se envuelva en una nueva línea.

- `flex-grow`: Define la capacidad de un elemento para crecer si es necesario. Ejemplo: `flex-grow: 2;` permitirá que el elemento crezca el doble de rápido que los elementos hermanos.
- `flex-shrink`: Indica cómo un elemento se encogerá en relación con los demás. Ejemplo: `flex-shrink: 1;` permitirá que el elemento se reduzca si es necesario.
- `flex-basis`: Establece el tamaño inicial de un elemento antes de la distribución del espacio restante. Ejemplo: `flex-basis: 20%;` asignará un tamaño inicial del 20%.
- `order`: Controla el orden en que aparecen los elementos flexibles. Ejemplo: `order: 2;` colocará el elemento en la segunda posición.
- `grid-gap`: Define el espacio entre elementos en un diseño de cuadrícula. Ejemplo: `grid-gap: 10px;` establecerá un espacio de 10 píxeles entre elementos.
- `grid-column`: Especifica la ubicación de un elemento en las columnas de una cuadrícula. Ejemplo: `grid-column: 1 / 3;` abarcará desde la primera hasta antes de la tercera columna.
- `grid-row`: Indica la ubicación de un elemento en las filas de una cuadrícula. Ejemplo: `grid-row: 2 / 4;` abarcará desde la segunda hasta antes de la cuarta fila.
- `grid-template-areas`: Define áreas dentro de un diseño de cuadrícula. Ejemplo: `grid-template-areas: 'header header header' 'main main sidebar' 'footer footer footer';` 
creará un diseño con cabecera, contenido principal, barra lateral y pie de página.
- `aspect-ratio`: Controla la relación de aspecto de un elemento. Ejemplo: `aspect-ratio: 16 / 9;` mantendrá una relación de aspecto de 16:9.
- `clip-path`: Recorta un elemento para crear formas complejas. Ejemplo: `clip-path: circle(50%);` recortará el elemento en forma de círculo.

«««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««

█████████████████████████████████████████████████████████████
██---------------------------------------------------------██
███                 Lenguaje de .JavaScript               ███
██---------------------------------------------------------██
█████████████████████████████████████████████████████████████


»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»
(JavaScript)

- `alert()`: Muestra un mensaje y espera que el usuario presione "Aceptar". Ejemplo: `alert('Hola Mundo!');`
- `console.log()`: Imprime un mensaje en la consola del navegador. Útil para depuración. Ejemplo: `console.log('Mensaje');`
- `document.getElementById()`: Selecciona un elemento por su ID. Ejemplo: `document.getElementById('miElemento');`
- `document.createElement()`: Crea un nuevo elemento HTML. Ejemplo: `document.createElement('div');`
- `addEventListener()`: Asigna un manejador de eventos a un elemento. Ejemplo: `element.addEventListener('click', miFuncion);`
- `setTimeout()`: Ejecuta una función después de un número especificado de milisegundos. Ejemplo: `setTimeout(miFuncion, 3000);`
- `clearTimeout()`: Cancela un temporizador establecido con `setTimeout()`. Ejemplo: `clearTimeout(miTemporizador);`
- `setInterval()`: Ejecuta una función repetidamente, con un intervalo de tiempo entre cada llamada. Ejemplo: `setInterval(miFuncion, 3000);`
- `clearInterval()`: Cancela un temporizador establecido con `setInterval()`. Ejemplo: `clearInterval(miIntervalo);`
- `fetch()`: Realiza peticiones de red y maneja la respuesta. Ejemplo: `fetch('https://api.ejemplo.com/datos').then(response => response.json()).then(data => console.log(data));`

- `Math.random()`: Devuelve un número aleatorio entre 0 (inclusive) y 1 (exclusivo). Ejemplo: `Math.random();`
- `Math.round()`: Redondea un número al entero más cercano. Ejemplo: `Math.round(4.7);` devuelve 5.
- `Math.max()`: Devuelve el mayor de cero o más números. Ejemplo: `Math.max(10, 20);` devuelve 20.
- `Math.min()`: Devuelve el menor de cero o más números. Ejemplo: `Math.min(10, 20);` devuelve 10.
- `Math.floor()`: Redondea un número hacia abajo al entero más cercano. Ejemplo: `Math.floor(4.7);` devuelve 4.
- `Math.ceil()`: Redondea un número hacia arriba al entero más cercano. Ejemplo: `Math.ceil(4.1);` devuelve 5.
- `Math.sqrt()`: Devuelve la raíz cuadrada de un número. Ejemplo: `Math.sqrt(16);` devuelve 4.
- `Math.pow()`: Devuelve la base elevada al exponente. Ejemplo: `Math.pow(2, 3);` devuelve 8.
- `Array.push()`: Añade uno o más elementos al final de un array. Ejemplo: `miArray.push('nuevo elemento');`
- `Array.pop()`: Elimina el último elemento de un array. Ejemplo: `miArray.pop();`

- `String.prototype.concat()`: Combina dos o más cadenas de texto. Ejemplo: `'Hola'.concat(' ', 'Mundo!');` devuelve "Hola Mundo!".
- `String.prototype.includes()`: Determina si una cadena de texto contiene una subcadena específica. Ejemplo: `'Hola Mundo'.includes('Mundo');` devuelve true.
- `Array.prototype.filter()`: Crea un nuevo array con todos los elementos que pasen la prueba implementada por la función proporcionada. Ejemplo: `[1, 2, 3].filter(num => num > 2);` devuelve [3].
- `Array.prototype.map()`: Crea un nuevo array con los resultados de la llamada a una función para cada elemento del array. Ejemplo: `[1, 2, 3].map(num => num * 2);` devuelve [2, 4, 6].
- `Array.prototype.reduce()`: Aplica una función contra un acumulador y cada elemento del array (de izquierda a derecha) para reducirlo a un único valor. Ejemplo: `[1, 2, 3].reduce((total, num) => total + num, 0);` devuelve 6.
- `Array.prototype.sort()`: Ordena los elementos de un array in situ y devuelve el array. Ejemplo: `['b', 'c', 'a'].sort();` devuelve ['a', 'b', 'c'].
- `Array.prototype.slice()`: Devuelve una copia de una parte del array dentro de un nuevo array. Ejemplo: `[1, 2, 3, 4].slice(1, 3);` devuelve [2, 3].
- `Array.prototype.splice()`: Cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos. Ejemplo: `[1, 2, 3, 4].splice(1, 2, 'a', 'b');` 
devuelve [2, 3] y el array original se convierte en [1, 'a', 'b', 4].

- `Object.keys()`: Devuelve un array de las propiedades nombres de un objeto. Ejemplo: `Object.keys({a: 1, b: 2, c: 3});` devuelve ['a', 'b', 'c'].
- `Object.values()`: Devuelve un array de los valores de las propiedades de un objeto. Ejemplo: `Object.values({a: 1, b: 2, c: 3});` devuelve [1, 2, 3].